import axios from"axios";const API_URL_ORDER="http://localhost/dolibarr/htdocs/api/index.php/orders",API_URL_INVOICE="http://localhost/dolibarr/htdocs/api/index.php/invoices",API_KEY="DSAxxkghj9N6SNub050NEi46kc1EF16L";export const addToCart=product=>{let cart=JSON.parse(sessionStorage.getItem("cart"))||[];const existingProduct=cart.find((item=>item.id===product.id));existingProduct?existingProduct.quantity+=1:cart.push({...product,quantity:1}),sessionStorage.setItem("cart",JSON.stringify(cart))};export const getCartItems=()=>JSON.parse(sessionStorage.getItem("cart"))||[];export const updateProductQuantity=(id,quantity)=>{let cart=JSON.parse(sessionStorage.getItem("cart"))||[];const productIndex=cart.findIndex((item=>item.id===id));-1!==productIndex&&(cart[productIndex].quantity=quantity,sessionStorage.setItem("cart",JSON.stringify(cart)))};export const removeProductFromCart=id=>{let cart=JSON.parse(sessionStorage.getItem("cart"))||[];cart=cart.filter((item=>item.id!==id)),sessionStorage.setItem("cart",JSON.stringify(cart))};let isProcessing=!1;export const valideCommande=async()=>{if(isProcessing)console.log("Une commande est d√©j√† en cours de traitement.");else try{isProcessing=!0;const cart=JSON.parse(sessionStorage.getItem("cart"))||[],socid=sessionStorage.getItem("clientId");if(!socid)throw new Error("socid (ID du client) manquant.");if(!cart||0===cart.length)throw new Error("Le panier est vide.");console.log("Contenu du panier:",JSON.stringify(cart,null,2));const payloadOrder={socid:socid,date:Math.floor(Date.now()/1e3),type:0,lines:cart.map((item=>({fk_product:item.id,qty:item.quantity,price:item.price,subprice:item.price,tva_tx:item.tva,label:item.title})))},config={headers:{DOLAPIKEY:API_KEY,"Content-Type":"application/json"}},orderResponse=await axios.post(API_URL_ORDER,payloadOrder,config);if(200!==orderResponse.status)throw new Error(`Erreur lors de la cr√©ation de la commande : ${orderResponse.statusText}`);console.log("‚úÖ Commande cr√©√©e avec succ√®s")}catch(error){throw console.error("‚ùå Erreur lors de la validation de la commande : "+error.message),error}finally{isProcessing=!1,sessionStorage.removeItem("cart"),console.log("üßπ Le panier a √©t√© vid√©.")}};export async function getCommande(){try{const clientId=sessionStorage.getItem("clientId");if(!clientId)return console.warn("Aucun clientId trouv√© dans le sessionStorage."),[];const sqlFilter=`(t.fk_soc:=:${clientId})`,response=await axios.get(API_URL_ORDER,{headers:{DOLAPIKEY:API_KEY,Accept:"application/json"},params:{sortfield:"t.ref",sortorder:"ASC",limit:100,sqlfilters:sqlFilter}});return console.log("Commandes r√©cup√©r√©es pour le client connect√© :",response.data),response.data}catch(error){return error.response?console.error(`Erreur du serveur (HTTP ${error.response.status}) :`,error.response.data):error.request?console.error("Aucune r√©ponse du serveur. V√©rifiez votre connexion :",error.request):console.error("Erreur lors de la requ√™te :",error.message),[]}}export async function getDetail(ref){try{const sqlFilter=`(t.ref:=:'${ref}')`,responseCommande=await axios.get(API_URL_ORDER,{headers:{DOLAPIKEY:API_KEY,Accept:"application/json"},params:{sqlfilters:sqlFilter,limit:1}});if(0===responseCommande.data.length)return console.warn(`Aucune commande trouv√©e pour la r√©f√©rence ${ref}`),null;const commande=responseCommande.data[0],commandeId=commande.id;console.log(`D√©tails de la commande pour ${ref} :`,commande);const responseLignes=await axios.get(`${API_URL_ORDER}/${commandeId}/lines`,{headers:{DOLAPIKEY:API_KEY,Accept:"application/json"}});if(0===responseLignes.data.length)return console.warn(`Aucune ligne trouv√©e pour la commande ${commandeId}`),null;const commandeDetails={commande:commande,lignes:responseLignes.data};return console.log(`D√©tails de la commande ${ref} :`,commandeDetails),commandeDetails}catch(error){return error.response?console.error(`Erreur du serveur (HTTP ${error.response.status}) :`,error.response.data):error.request?console.error("Aucune r√©ponse du serveur :",error.request):console.error("Erreur lors de la requ√™te :",error.message),null}}export async function updateCommande(commandeId){try{const lastOrderRef=await getLastOrderReference();if(console.log("new ref"+lastOrderRef),lastOrderRef){const newReference=generateNewReference(lastOrderRef);console.log("new ref"+newReference);const data={statut:1,ref:newReference},response=await axios.put(`${API_URL_ORDER}/${commandeId}`,data,{headers:{DOLAPIKEY:API_KEY,Accept:"application/json"}});return 200===response.status?(console.log(`Commande ${commandeId} mise √† jour avec succ√®s`),response.data):(console.warn(`√âchec de la mise √† jour de la commande ${commandeId}`),null)}return console.warn("Impossible de r√©cup√©rer la derni√®re commande pour g√©n√©rer une nouvelle r√©f√©rence"),null}catch(error){return error.response?console.error(`Erreur du serveur (HTTP ${error.response.status}) :`,error.response.data):error.request?console.error("Aucune r√©ponse du serveur :",error.request):console.error("Erreur lors de la requ√™te :",error.message),null}}async function getLastOrderReference(){try{const sqlFilter="(t.ref:like:'SO2504-%')",response=await axios.get(`${API_URL_ORDER}`,{headers:{DOLAPIKEY:API_KEY,Accept:"application/json"},params:{sortfield:"t.ref",sortorder:"DESC",limit:100,sqlfilters:sqlFilter}});return 200===response.status&&response.data.length>0?response.data[0].ref:(console.warn("Aucune commande trouv√©e pour g√©n√©rer une nouvelle r√©f√©rence"),"SO2504-0000")}catch(error){return console.error("Erreur lors de la r√©cup√©ration de la derni√®re commande :",error),"SO2504-0000"}}function generateNewReference(lastRef){if("SO2504-0000"===lastRef)return"SO2504-0001";const[prefix,lastNumber]=lastRef.split("-");return`${prefix}-${(parseInt(lastNumber,10)+1).toString().padStart(4,"0")}`}export async function isFactureCreatedForCommande(commandeId){try{const response=await axios.get(`http://localhost:3000/api/getInvoiceForOrder/${commandeId}`);return response.data.id_facture?(console.log(`Facture trouv√©e avec ID : ${response.data.id_facture}`),response.data.id_facture):(console.log("Aucune facture trouv√©e pour cette commande."),null)}catch(error){return console.error("Erreur lors de l'appel √† l'API:",error),null}}export async function isFacturePaye(factureId){try{const response=await axios.get(`${API_URL_INVOICE}/${factureId}`,{headers:{DOLAPIKEY:API_KEY,Accept:"application/json"}});return console.log("R√©ponse de l'API:",response.data),200===response.status?Array.isArray(response.data)&&response.data.length>0?response.data[0]:response.data&&response.data.id?response.data:(console.warn("Aucune client trouv√©e pour cet ID."),null):(console.warn("R√©ponse de l'API invalide, code de statut:",response.status),null)}catch(error){return console.error("Erreur lors de la r√©cup√©ration de la facture :",error),null}}